(* This is the preamble where you can have arbitrary sml code. For us
it is empty *)

%%
(* The terminals or tokens of the language *)
%term CONST of int
    | PLUS
    | MINUS
    | MUL
    | EOF
    | NEWLINE
    | PRINTLN
    | ASSIGN
    | VARIABLE of string
    (* | DIV
    | LBRAC
    | RBRAC *)

(* The nonterminals of the language *)
%nonterm EXP     of Ast.Expr
       | PROGRAM of Ast.Stmt list
       | STMT    of Ast.Stmt
       | STMTS   of Ast.Stmt list
       (* | EXPS    of Ast.Expr list *)


(*TODO 
1. prog of ast.stmt list
stmt of ast.expr
*)

%eop EOF (* What token to use as end of parsing token              *)
%verbose (* Generates a printed form of the table in expr.grm.desc *)
%pure


%name Expr (* The prefix to use on the name of LrValFun structure *)


%noshift EOF
(*

Operator precedence and associativity. The %left says the operator is
left associative and the precedence increase as you go down this list.

*)

%left VARIABLE
%left ASSIGN
%left PLUS MINUS  (* + and - are of same precedence *)
(* %left DIV MUL      higher than + and -            *)
%left MUL
%left CONST
(* The type that captures position in the input *)
%pos int

%%

PROGRAM : STMTS             ( STMTS )
	| STMTS NEWLINE         ( STMTS )

(* (replace exps with stmt) *)

(* EXPS    : (* empty *)          ( []                  )
	| EXP NEWLINE EXPS     ( EXP :: EXPS         ) *)

(* stmts: empty
        | stmt newline stmts *)
        
    (* stmt: expr assign expr | print expr*)
STMTS : (*empty*)         ([])
    |   STMT NEWLINE STMTS (STMT :: STMTS)

EXP : VARIABLE             (Ast.Variable VARIABLE) 
    |CONST                 ( Ast.Const CONST     )
    | EXP PLUS EXP         ( Ast.plus  EXP1 EXP2 )
	| EXP MINUS EXP        ( Ast.minus EXP1 EXP2 )
	| EXP MUL   EXP        ( Ast.mul   EXP1 EXP2 )
    (* |CONST                 ( Ast.const CONST     ) *)

STMT : PRINTLN EXP       (Ast.println EXP)
    |  VARIABLE ASSIGN EXP    (Ast.assign VARIABLE EXP)

    (* | EXP DIV   EXP        ( Ast.divi   EXP1 EXP2 )
    | LBRAC EXP RBRAC      ( EXP) *)
 
